Flow Equivalents for Apex  

This section provides high-level draft guidance to help you understand how Flow-based alternatives could be created for the Apex classes used in the workshop. These instructions offer a starting point for exploring low-code Flow alternatives to the Apex actions used in the workshop.

Caution: These flow creation instructions are not meant to be utilized during the instructor-led workshop as they have not been tested. 
GetContactIdByEmail Flow Alternative to Apex Class
Flow Name
Get_Contact_Id_By_Email_Flow
 
Flow Type
Auto-launched Flow
(Required for use as a custom action in Agentforce)
 
Input Variable
Variable Name	Type	Available for Input	Description
email	Text	Yes	Email address of the contact

Flow Steps
1.	Get Records: Contact by Email
o	Object: Contact
o	Filter:
	Email = {!email}
o	Sort: (optional)
o	Limit: 1 record
o	Store output in: foundContact
2.	Decision: Contact Found?
o	If foundContact is null
	Assign output:
	contactId = null
	message = "No contact found with that email."
o	Else
	Assign output:
	contactId = {!foundContact.Id}
	message = ""
 
Output Variables
Variable Name	Type	Available for Output	Description
contactId	Text	Yes	ID of the contact (or null if not found)
message	Text	Yes	Status message for the Copilot response

Note: contactId is of type Text in the flow (not ID), but behaves equivalently in Agentforce.

Agentforce Action Configuration
•	Map input: email
•	Map outputs:
o	contactId → downstream action (if chaining)
o	message → Copilot response, optional

GetCasesByEmail Flow Alternative to Apex Class
Flow Name
Get_Cases_By_Email_Flow
Flow Type
Auto-launched Flow
(Required for Agentforce custom actions)
 
Input Variables
Variable Name	Type	Available for Input	Description
email	Text	Yes	Email address of the contact

Flow Steps
1.	Get Contact by Email
o	Element: Get Records
o	Object: Contact
o	Condition: Email = {!email}
o	Limit: 1
o	Output: foundContact
2.	Decision: Contact Found?
o	If foundContact is null → assign output message:
"No contact found with that email."
o	Else → proceed to fetch cases
3.	Get Related Cases
o	Element: Get Records
o	Object: Case
o	Condition: ContactId = {!foundContact.Id}
o	Fields: Id, CaseNumber, Subject, Status, Priority, CreatedDate
o	Sort by: CreatedDate DESC
o	Store all records in collection: caseList
4.	Decision: Any Cases Found?
o	If caseList is empty → assign output message:
"No cases found for this contact."
o	Else → continue
5.	Loop: Through Cases
o	Loop over caseList
o	In each iteration, use Assignment or Text Template to format case details
o	Append each formatted entry to a Text Collection Variable: caseDescriptions
6.	After Loop: Join Case Details
o	Use Text Template to join all entries into a single string
o	Assign result to caseData
 
Output Variable
Variable Name	Type	Available for Output	Description
caseData	Text	Yes	Final formatted case list output

Agentforce Configuration Notes
•	Mark email as required input in the Agent Action setup
•	Use caseData as the response variable
•	Optional: add basic validation or fallback message if needed in flow
PersonalizedOpportunities Flow Alternative to Apex Class
TBD

GetCurrentUserAction Flow Alternative to Apex Class
Flow Title
Get Current User Flow
 
Flow Type
Auto-launched Flow
(Required for use as an Agentforce custom action)
 
Input Variables
None required
(Agentforce provides the current user context automatically)
 
Steps
1.	Assignment: Store Current User Id
o	Create a new text variable: currentUserId (Available for input: unchecked)
o	Assign value: currentUserId = {!$User.Id}
2.	Get Records: Get Current User
o	Object: User
o	Filter: Id = {!currentUserId}
o	Store first record only
o	Output: currentUser
3.	Create Output Variable
o	Variable Name: userRecord
o	Data Type: Record
o	Object: User
o	Available for output: checked
o	Assign: userRecord = {!currentUser}
 
Output Variables
•	userRecord (Record → User)
This is returned to the agent for further use in downstream actions or prompts.
 
Notes for Agentforce Usage
•	Ensure no inputs are required in the action configuration.
•	Mark userRecord as the output field in the custom action setup.
•	You can now use this flow to fetch current user details natively within Agentforce, replacing the Apex logic entirely.

AddCommentToCase Flow Alternative to Apex Class
Flow Type: Auto-launched Flow
→ Flow to be used in Agentforce custom actions
 
Step-by-Step (Agentforce-Friendly)
1.	Create 3 Input Variables (API name must match the Action definition)
o	caseId (Text, Available for input)
o	contactId (Text, Available for input)
o	commentBody (Text, Available for input)
2.	Get Records: Case
o	Object: Case
o	Condition:
	Id = {!caseId}
	ContactId = {!contactId}
o	Store first record only
o	Label: "Get Case by ID and Contact"
3.	Decision: Was Case Found?
o	If Get Records result is null → Assign error message or exit flow
o	If case found → Proceed to comment creation
4.	Create Records: CaseComment
o	Set fields:
	ParentId = {!caseId}
	CommentBody = {!commentBody}
	IsPublished = true
o	Label: "Add Case Comment"
5.	Create Output Variable
o	message (Text, Available for output)
o	Assign: "Comment added successfully to Case ID: {!caseId}"
 
Additional Agentforce Tips
•	Name your Flow meaningfully, e.g., Add_Comment_To_Case_Flow
•	In Agent Action setup:
o	Map input fields to caseId, contactId, commentBody
o	Map output to message
•	Don't forget to mark variables as “Available for input/output” in the Flow



